name: shroobada

services:

  traefik:
    image: "docker.io/traefik:v3.1"
    container_name: "traefik"
    ports:
      - "8080:80"
      - "8443:443"
    env_file:
      - "/etc/traefik/.traefik.env"
    networks:
      - TraefikNet
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "/etc/traefik/letsencrypt:/letsencrypt"
      - "/etc/traefik/traefik.yml:/etc/traefik/traefik.yml"
      - "/etc/traefik/dynamic:/dynamic"
      - "TraefikLogs:/var/log/traefik/"
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  whoami:
    image: "docker.io/traefik/whoami"
    container_name: "whoami"
    networks:
      - TraefikNet
    labels:
      - "traefik.enable=true"

  postgresql:
    image: docker.io/library/postgres:16-alpine
    container_name: postgres
    environment:
      POSTGRES_PASSWORD: ${PG_PASS:?database password required}
      POSTGRES_USER: ${PG_USER:-authentik}
      POSTGRES_DB: ${PG_DB:-authentik}
    env_file:
      - .env
    networks:
      - AuthNet
    volumes:
      - database:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s

  auth-redis:
    image: docker.io/library/redis:alpine
    container_name: auth-redis
    command: --save 60 1 --loglevel warning
    networks:
      - AuthNet
    volumes:
      - redis:/data
        restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
      
  auth-server:
    image: ghcr.io/goauthentik/server:2024.8.2
    container_name: auth-server
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    env_file:
      - .env
    networks:
      - TraefikNet
      - AuthNet
    volumes:
      - ./media:/media
      - ./custom-templates:/templates
    ports:
      - "9000:9000"
      #- "9443:9443"
    labels:
      - "traefik.enable=true"
    restart: unless-stopped
    depends_on:
      - postgresql
      - auth-redis
      
  auth-worker:
    image: ghcr.io/goauthentik/server:2024.8.2
    container_name: auth-worker
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: auth-redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    networks:
      #- TraefikNet
      - AuthNet
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./media:/media
      - ./certs:/certs
      - ./custom-templates:/templates
    env_file:
      - .env
    depends_on:
      - postgresql
      - auth-redis

networks:
  TraefikNet:
    name: TraefikNet
    driver: bridge
    internal: false
  AuthNet:
    name: AuthNet
    driver: bridge
    internal: true

volumes:
  TraefikLogs:
    driver: local
    driver_opts:
      type: none
      device: /var/log/traefik
      o: bind
  database:
    driver: local
  redis:
    driver: local
